/*****************************************************************************\
* (c) Copyright 2022 CERN for the benefit of the LHCb Collaboration           *
*                                                                             *
* This software is distributed under the terms of the GNU General Public      *
* Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   *
*                                                                             *
* In applying this licence, CERN does not waive the privileges and immunities *
* granted to it by virtue of its status as an Intergovernmental Organization  *
* or submit itself to any jurisdiction.                                       *
\*****************************************************************************/

/**
 * @file TMVA_MLP_GhostNN_PrForwardTrackingVelo.h
 * @brief The weights in this file are produced by the Reco-Parameterisation-Tuner
 * https://gitlab.cern.ch/gunther/prforwardtracking-parametrisation-tuner
 */

#include "Kernel/STLExtensions.h"
#include "Kernel/TMV_utils.h"
#include "vdt/exp.h"
#include <array>
#include <string_view>

namespace LHCb::Pr::Forward {
  namespace NNVelo {
    // ReLU
    constexpr auto ActivationFnc       = []( float x ) { return x > 0 ? x : 0; };
    constexpr auto OutputActivationFnc = []( float x ) {
      // sigmoid
      return 1.f / ( 1.f + vdt::fast_expf( -x ) );
    };

    constexpr auto fMin = std::array<float, 9>{ { 0.00086611090228, 0.000137108087074, 9.1552734375e-05,
                                                  1.52587890625e-05, 1.49011611938e-08, 0, 3.38108901987e-10, 0, 0 } };
    constexpr auto fMax =
        std::array<float, 9>{ { 7.99757671356, 139.755401611, 499.902832031, 139.934204102, 0.0548411794007,
                                0.33653563261, 0.0011771483114, 0.614122271538, 0.0932129621506 } };
    constexpr auto fWeightMatrix0to1 = std::array<std::array<float, 10>, 13>{
        { { 0.272388837195353, 1.04297766281443, 7.10858971290199, 8.20176699323914, -17.4998198279343,
            -0.903938445734019, -4.45523353351358, 0.202604346228416, -0.343763626116408, -6.0398577123475 },
          { 1.17259942394887, -0.372252986403353, -0.172055869721126, 4.32425941771619, 0.980522044689679,
            -0.486163242078544, 4.89499262471543, -2.19861130758734, -9.43992619200679, -2.37510165732473 },
          { -0.312463651685767, -0.114031703331406, -0.643524084362763, -0.130218804467335, 0.0672200809874041,
            0.492579418283905, 10.0423165027703, -9.1229718440813, -3.21081732473868, -3.78681415782996 },
          { 0.285964399088691, 3.50382532157828, 0.202967804648741, -2.34731912244972, -1.01724465412901,
            6.94879051931226, 1.42757737963066, -0.414886005380144, -5.12456720768917, -5.42877386327517 },
          { -1.17951731489478, -0.786765172581322, -4.2989135483231, 4.05294030963229, -0.127313249850962,
            -4.14839099916227, 3.23904819574731, -13.6552536266634, 20.5968822768501, 6.85315498878814 },
          { 0.103392918358953, 1.44880697882548, 0.577811396176936, 1.10045098601948, -0.178340433397024,
            -17.8770425761109, 3.7017773013521, -23.3892167651105, 15.0495143106538, -17.4605298799865 },
          { -1.64979711432504, 0.774908843327995, 3.31059510110807, -3.1819692768259, 7.12231795634781,
            -0.241753227182394, -0.977884374115893, 0.952532388892299, 0.723099651883065, 6.54591062809547 },
          { -0.0534432249645241, 3.9887257817946, -1.49200429968719, 11.8855727958475, 1.04666107895933,
            0.238167385927067, -17.6503013604389, -0.6355065389129, 34.3524751991456, 32.5893217368421 },
          { 0.386236757608688, -3.68207271228384, -1.59827939590235, -5.63561468820375, -2.05612305429069,
            -0.414007692878055, -2.30218891934988, -1.45254018219727, -41.888511388421, -55.4154956571825 },
          { -0.33882942035142, 0.828500879691617, -1.11913145963814, 5.44432070997378, 0.593216106072808,
            -0.335356938266522, -4.29488215708929, -0.45349431026542, 12.6168245530257, 11.203180125896 },
          { -5.06732270572528, -0.747932010258911, -1.32944569630483, 0.399754582341283, -1.22419379102021,
            -0.0632059754142294, -3.9176205612916, 4.95338770012354, -10.0874931996749, -13.4899867496953 },
          { -0.652708751114843, 0.153993426617753, 0.507696533435112, -0.0829575859982346, -1.26075671332944,
            -1.72921422048723, 0.436623404900834, 1.2481716555653, 4.75489497214422, 0.917647460712304 },
          { -0.337064695166363, 1.6829713570542, -1.24667087979073, 4.38935163725774, 0.546771935887102,
            0.380216805759757, -4.27094569696754, 1.60030195739679, 21.1019766790379, 22.9277879180437 } } };
    constexpr auto fWeightMatrix1to2 = std::array<std::array<float, 14>, 11>{
        { { 0.942639197400156, -0.0931922637028017, 1.16131136847027, -0.463586546886379, -0.00734730684531865,
            0.659865738065189, -0.0819640968388477, 0.716168152659691, 0.0594465496519534, -3.09809338025968,
            -0.993314598112327, -0.626796644903994, 1.18112507293241, -7.53912207323744 },
          { -0.290157117133191, -1.44319213353958, 0.976801127908426, 1.83059667355593, -0.579127895773621,
            -0.959358564216034, -0.200943614057267, 2.26102190218572, 0.680574054232225, 0.512044291258324,
            0.441279132836691, 0.195148753454237, -4.40558418761793, -2.59697427283538 },
          { 0.231019193167673, -0.33534671921076, -4.02952877004057, 0.328301743837591, -0.935217897351683,
            0.656308147872124, 0.148770195853327, -1.02822979925373, -1.15074999231744, 1.25931257478392,
            -5.51506732446672, 2.76878002159781, 1.15670995216412, -1.81920686548505 },
          { -1.4433538095335, -1.39651294706804, -0.0384612540687588, -0.643375798593072, -0.125102719515762,
            -0.654090297545811, -1.64699393573932, -0.508246308405062, -0.781867310732538, 1.0126843726006,
            -1.62926724862902, 1.36812357325107, -0.529386420395731, -0.0138925908234309 },
          { -1.41898718038457, 0.477953102899375, -0.322619989760896, 1.09732380296345, -0.782655793929218,
            0.462713092659323, -2.94842712863178, -0.132292667509809, 0.0769059927035169, 1.19584278425479,
            -1.05534832662164, -0.531211272706436, -0.611338365394562, 3.05377051979242 },
          { -1.24565900961033, -0.803882286327658, 0.779616435095014, -0.149080238970127, -1.12090436198206,
            -0.881759817062632, -2.29233937767415, -1.47774128243345, 1.08239889708401, 2.24462771397501,
            0.485265744305715, -1.48553084966211, -0.0143728439705144, 3.27583681932498 },
          { -0.28996288685836, 0.780550033512762, -2.15121583289839, 1.20922563714172, -0.644843512306469,
            -0.234457523529768, -0.231658959155198, 0.218579418768696, -0.395509623165805, -0.411218621945028,
            -1.02932631809835, -0.376223727062923, -0.340041262998441, 3.63881067894002 },
          { 1.44978573970303, -2.18583173535086, -0.846483915375948, 0.105328656470861, 1.87072932363927,
            -0.00190765575147529, 0.584012973055999, -1.39776672542255, -0.180232469445207, -1.98952098967519,
            -1.37262959684684, -0.90548142705001, -0.920429811986854, -2.99277232574331 },
          { 0.921784086695698, 0.803938386481379, -0.793436984418934, -0.198036997127606, 0.88955947123962,
            0.62100428659737, 1.37636249959335, 0.820454358047461, -0.632502523362294, -2.07934437515782,
            -0.181199371886594, -3.08568993123453, -0.36401687310168, -2.43212452146954 },
          { 0.699249590603178, 0.278024565615921, -0.198350259368371, -0.783418866551348, 0.118700073145684,
            0.21833431656626, 1.65512324292893, -0.111147682703641, 1.3283515189562, -0.246599469063488,
            0.754508475403135, 0.00506528019287302, 0.166494023039331, -4.84019659854236 },
          { 0.298019259877464, 0.00346409235528412, 1.35256951642456, 0.869362943235745, -1.52238605698392,
            1.83110259539772, -0.878203306047072, -0.0145711167869491, -2.02333355061148, 0.870770188694429,
            0.379444379601702, 0.418591035142932, 0.19006790384741, -4.59660818674123 } } };
    constexpr auto fWeightMatrix2to3 =
        std::array<float, 12>{ { 0.283357190373951, -0.505821393459412, -0.992928878077031, 1.46980063870956,
                                 -0.393221447900897, 0.68377817358151, -0.516508953958371, -0.282023879956352,
                                 -0.65334083539925, 0.526593979331363, -0.157977106282126, 1.39115062576625 } };

    // Normalization transformation
    constexpr auto transformer = TMV::Utils::Transformer{ fMin, fMax };

    // the training input variables
    constexpr auto validator = TMV::Utils::Validator{
        "ReadGhostNN",
        std::tuple{ "redChi2", "abs((x+(zMagMatch-770.0)*tx)-(xEndT+(zMagMatch-9410.0)*txEndT))",
                    "abs(ySeedMatch-yEndT)", "abs(yParam0Final-yParam0Init)", "abs(yParam1Final-yParam1Init)",
                    "abs(ty)", "abs(qop)", "abs(tx)", "abs(xParam1Final-xParam1Init)" } };
    constexpr auto l0To1 = TMV::Utils::Layer{ fWeightMatrix0to1, ActivationFnc };
    constexpr auto l1To2 = TMV::Utils::Layer{ fWeightMatrix1to2, ActivationFnc };
    constexpr auto l2To3 = TMV::Utils::Layer{ fWeightMatrix2to3, OutputActivationFnc };
    constexpr auto MVA   = TMV::Utils::MVA{ validator, transformer, 0, l0To1, l1To2, l2To3 };
  } // namespace NNVelo

  struct ReadGhostNN final {

    // constructor
    ReadGhostNN( LHCb::span<const std::string_view, 9> theInputVars ) { NNVelo::MVA.validate( theInputVars ); }

    // the classifier response
    // "inputValues" is a vector of input values in the same order as the
    // variables given to the constructor
    static constexpr auto GetMvaValue( LHCb::span<const float, 9> input ) { return NNVelo::MVA( input ); }
  };

} // namespace LHCb::Pr::Forward
